import * as React from "react";
export declare type NotificationsContext = {
    create: (component: () => React.ReactElement<any>) => void;
    destroy: (id: string) => void;
    pop: () => void;
};
export declare function createScopedNotificationManager(): {
    NotificationsProvider: ({ children, render }: {
        children: React.ReactNode;
        render: React.ElementType<{
            state: import("./NotificationsReducer").State;
            dispatch: React.Dispatch<{
                type: "CREATE";
                id: string;
                component: () => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
                destroy: () => void;
            } | {
                type: "DESTROY";
                id: string;
            } | {
                type: "POP";
            }>;
            actions: NotificationsContext;
        }>;
    }) => JSX.Element;
    useNotificationManager: () => NotificationsContext;
};
