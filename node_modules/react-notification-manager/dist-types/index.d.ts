/// <reference types="react" />
import { createScopedNotificationManager } from "./createScopedNotificationsManager";
import { QueuedNotifications } from "./renderers/QueuedNotifications";
import { StackedNotifications } from "./renderers/StackedNotifications";
export { createScopedNotificationManager, QueuedNotifications, StackedNotifications };
export declare const NotificationsProvider: ({ children, render }: {
    children: import("react").ReactNode;
    render: import("react").ElementType<{
        state: import("./NotificationsReducer").State;
        dispatch: import("react").Dispatch<{
            type: "CREATE";
            id: string;
            component: () => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
            destroy: () => void;
        } | {
            type: "DESTROY";
            id: string;
        } | {
            type: "POP";
        }>;
        actions: import("./createScopedNotificationsManager").NotificationsContext;
    }>;
}) => JSX.Element, useNotificationManager: () => import("./createScopedNotificationsManager").NotificationsContext;
